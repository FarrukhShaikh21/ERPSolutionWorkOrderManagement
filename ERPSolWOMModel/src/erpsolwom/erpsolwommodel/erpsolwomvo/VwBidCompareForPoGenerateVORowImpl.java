package erpsolwom.erpsolwommodel.erpsolwomvo;

import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobClassModel;

import erpsolwom.erpsolwommodel.erpsolwomvo.common.VwBidCompareForPoGenerateVORow;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import oracle.as.management.translation.Severity;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun May 12 11:30:27 PKT 2024
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VwBidCompareForPoGenerateVORowImpl extends ViewRowImpl implements VwBidCompareForPoGenerateVORow {

    public static final int ENTITY_VWBIDCOMPAREFORPOGENERATE = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Supplierid,
        SuppName,
        Bidcompareheaderseq,
        SrPurchaseBidCompareLinesView;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int SUPPLIERID = AttributesEnum.Supplierid.index();
    public static final int SUPPNAME = AttributesEnum.SuppName.index();
    public static final int BIDCOMPAREHEADERSEQ = AttributesEnum.Bidcompareheaderseq.index();
    public static final int SRPURCHASEBIDCOMPARELINESVIEW = AttributesEnum.SrPurchaseBidCompareLinesView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VwBidCompareForPoGenerateVORowImpl() {
    }

    /**
     * Gets VwBidCompareForPoGenerate entity object.
     * @return the VwBidCompareForPoGenerate
     */
    public EntityImpl getVwBidCompareForPoGenerate() {
        return (EntityImpl) getEntity(ENTITY_VWBIDCOMPAREFORPOGENERATE);
    }

    /**
     * Gets the attribute value for SUPPLIERID using the alias name Supplierid.
     * @return the SUPPLIERID
     */
    public String getSupplierid() {
        return (String) getAttributeInternal(SUPPLIERID);
    }

    /**
     * Sets <code>value</code> as attribute value for SUPPLIERID using the alias name Supplierid.
     * @param value value to set the SUPPLIERID
     */
    public void setSupplierid(String value) {
        setAttributeInternal(SUPPLIERID, value);
    }

    /**
     * Gets the attribute value for SUPP_NAME using the alias name SuppName.
     * @return the SUPP_NAME
     */
    public String getSuppName() {
        return (String) getAttributeInternal(SUPPNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for SUPP_NAME using the alias name SuppName.
     * @param value value to set the SUPP_NAME
     */
    public void setSuppName(String value) {
        setAttributeInternal(SUPPNAME, value);
    }

    /**
     * Gets the attribute value for BIDCOMPAREHEADERSEQ using the alias name Bidcompareheaderseq.
     * @return the BIDCOMPAREHEADERSEQ
     */
    public Integer getBidcompareheaderseq() {
        return (Integer) getAttributeInternal(BIDCOMPAREHEADERSEQ);
    }

    /**
     * Sets <code>value</code> as attribute value for BIDCOMPAREHEADERSEQ using the alias name Bidcompareheaderseq.
     * @param value value to set the BIDCOMPAREHEADERSEQ
     */
    public void setBidcompareheaderseq(Integer value) {
        setAttributeInternal(BIDCOMPAREHEADERSEQ, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SrPurchaseBidCompareLinesView.
     */
    public RowIterator getSrPurchaseBidCompareLinesView() {
        return (RowIterator) getAttributeInternal(SRPURCHASEBIDCOMPARELINESVIEW);
    }
    public void doGeneratePOFromBidCompare() {
        System.out.println("begin ?:=pkg_service_request.FUNC_GENERATE_PO_BID_COMPARE('" +
                                                                getBidcompareheaderseq() + "'," +
                                                                "'"+getSupplierid() + "','" +
                                                                ERPSolGlobClassModel.doGetUserCode() + "'); END;");
            CallableStatement cs =
                this.getDBTransaction().createCallableStatement("begin ?:=pkg_service_request.FUNC_GENERATE_PO_BID_COMPARE('" +
                                                                getBidcompareheaderseq() + "'," +
                                                                "'"+getSupplierid() + "','" +
                                                                ERPSolGlobClassModel.doGetUserCode() + "'); END;", 1);
            try {
                cs.registerOutParameter(1, Types.VARCHAR);
                cs.executeUpdate();
                
                    this.getDBTransaction().commit();
                    this.getViewObject().executeQuery();
                    JboException jbo=new JboException(cs.getString(1));
                    jbo.setSeverity(JboException.SEVERITY_WARNING);
                    throw jbo;
    
            } catch (SQLException e) {
                System.out.println(e.getMessage() + "this is message");
                throw new JboException("Unable to supervise ");
            } finally {
                try {
                    cs.close();
                } catch (SQLException e) {
                }
            }
    }
}

