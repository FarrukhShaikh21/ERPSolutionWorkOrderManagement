package erpsolwom.erpsolwommodel.erpsolwomeo;

import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobClassModel;
import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobalsEntityImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 25 23:08:20 PKT 2024
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SrItemsImpl extends ERPSolGlobalsEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ItemId,
        ItemName,
        ItemCode,
        CreatedDate,
        CreatedBy,
        ItemFor,
        ModifiedBy,
        ModifiedDate,
        Brandid,
        CategoryId,
        CostCenter,
        GlCode,
        SrPurchaseDemandLines,
        SrPurchaseRfqLines,
        SrPurchaseBidLines,
        SrPurchaseBidCompareLines,
        SrPurchaseOrderLines,
        SrPoReceivingLines;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ITEMNAME = AttributesEnum.ItemName.index();
    public static final int ITEMCODE = AttributesEnum.ItemCode.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int ITEMFOR = AttributesEnum.ItemFor.index();
    public static final int MODIFIEDBY = AttributesEnum.ModifiedBy.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int BRANDID = AttributesEnum.Brandid.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int COSTCENTER = AttributesEnum.CostCenter.index();
    public static final int GLCODE = AttributesEnum.GlCode.index();
    public static final int SRPURCHASEDEMANDLINES = AttributesEnum.SrPurchaseDemandLines.index();
    public static final int SRPURCHASERFQLINES = AttributesEnum.SrPurchaseRfqLines.index();
    public static final int SRPURCHASEBIDLINES = AttributesEnum.SrPurchaseBidLines.index();
    public static final int SRPURCHASEBIDCOMPARELINES = AttributesEnum.SrPurchaseBidCompareLines.index();
    public static final int SRPURCHASEORDERLINES = AttributesEnum.SrPurchaseOrderLines.index();
    public static final int SRPORECEIVINGLINES = AttributesEnum.SrPoReceivingLines.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SrItemsImpl() {
    }

    /**
     * Gets the attribute value for ItemId, using the alias name ItemId.
     * @return the value of ItemId
     */
    public Integer getItemId() {
        return (Integer) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemId.
     * @param value value to set the ItemId
     */
    public void setItemId(Integer value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for ItemName, using the alias name ItemName.
     * @return the value of ItemName
     */
    public String getItemName() {
        return (String) getAttributeInternal(ITEMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemName.
     * @param value value to set the ItemName
     */
    public void setItemName(String value) {
        setAttributeInternal(ITEMNAME, value);
    }

    /**
     * Gets the attribute value for ItemCode, using the alias name ItemCode.
     * @return the value of ItemCode
     */
    public String getItemCode() {
        return (String) getAttributeInternal(ITEMCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemCode.
     * @param value value to set the ItemCode
     */
    public void setItemCode(String value) {
        setAttributeInternal(ITEMCODE, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for ItemFor, using the alias name ItemFor.
     * @return the value of ItemFor
     */
    public String getItemFor() {
        return (String) getAttributeInternal(ITEMFOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemFor.
     * @param value value to set the ItemFor
     */
    public void setItemFor(String value) {
        setAttributeInternal(ITEMFOR, value);
    }

    /**
     * Gets the attribute value for ModifiedBy, using the alias name ModifiedBy.
     * @return the value of ModifiedBy
     */
    public String getModifiedBy() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedBy.
     * @param value value to set the ModifiedBy
     */
    public void setModifiedBy(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for Brandid, using the alias name Brandid.
     * @return the value of Brandid
     */
    public String getBrandid() {
        return (String) getAttributeInternal(BRANDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Brandid.
     * @param value value to set the Brandid
     */
    public void setBrandid(String value) {
        setAttributeInternal(BRANDID, value);
    }

    /**
     * Gets the attribute value for CategoryId, using the alias name CategoryId.
     * @return the value of CategoryId
     */
    public Integer getCategoryId() {
        return (Integer) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoryId.
     * @param value value to set the CategoryId
     */
    public void setCategoryId(Integer value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for CostCenter, using the alias name CostCenter.
     * @return the value of CostCenter
     */
    public String getCostCenter() {
        return (String) getAttributeInternal(COSTCENTER);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostCenter.
     * @param value value to set the CostCenter
     */
    public void setCostCenter(String value) {
        setAttributeInternal(COSTCENTER, value);
    }

    /**
     * Gets the attribute value for GlCode, using the alias name GlCode.
     * @return the value of GlCode
     */
    public String getGlCode() {
        return (String) getAttributeInternal(GLCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for GlCode.
     * @param value value to set the GlCode
     */
    public void setGlCode(String value) {
        setAttributeInternal(GLCODE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPurchaseDemandLines() {
        return (RowIterator) getAttributeInternal(SRPURCHASEDEMANDLINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPurchaseRfqLines() {
        return (RowIterator) getAttributeInternal(SRPURCHASERFQLINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPurchaseBidLines() {
        return (RowIterator) getAttributeInternal(SRPURCHASEBIDLINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPurchaseBidCompareLines() {
        return (RowIterator) getAttributeInternal(SRPURCHASEBIDCOMPARELINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPurchaseOrderLines() {
        return (RowIterator) getAttributeInternal(SRPURCHASEORDERLINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSrPoReceivingLines() {
        return (RowIterator) getAttributeInternal(SRPORECEIVINGLINES);
    }

    /**
     * @param itemId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer itemId) {
        return new Key(new Object[] { itemId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("erpsolwom.erpsolwommodel.erpsolwomeo.SrItems");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setERPISGenertePK("NO");
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            String pkValue="nvl(max(item_id),0)+1 ";
            System.out.println(pkValue + "pk value");
            String result= ERPSolGlobClassModel.doGetERPSolPrimaryKeyValueModel(getDBTransaction(), pkValue, "SR_ITEMS", null, null);
            populateAttributeAsChanged(ITEMID, Integer.parseInt(result));
        }
        super.doDML(operation, e);
    }
}

